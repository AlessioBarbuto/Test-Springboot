package com.intesasanpaolo.bear.tit0.engine;

import com.intesasanpaolo.bear.tit0.engine.*;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonRowObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonTableObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.ZeroTermStructure;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.CurveStructure;
import com.intesasanpaolo.bear.tit0.engine.model.drools.IN;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT_list;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT;
import com.intesasanpaolo.bear.tit0.engine.utils.MathOperator;
import org.apache.commons.math3.analysis.function.Max;
import org.kie.api.builder.*;
import org.kie.api.runtime.*;
import com.google.gson.*;
import java.util.*

import java.util.ArrayList;
import java.util.HashMap;
import com.intesasanpaolo.bear.tit0.engine.utils.*;
import org.slf4j.Logger;

global java.util.HashMap myMap

 


rule"Controllo #12"
    dialect"mvel"
    when
        
        dayCounter: DayCounter()
        log: Logger()


         discount:  CurveStructure(
            fl_input =="I",
            cod_asset =="EUR-DISC",
            cod_type =="Discount factor")   
         basis:  CurveStructure(
            fl_input =="I",
            cod_asset =="BASIS-3v6")       
         ispread:  CurveStructure(
            fl_input ==	"I",
            cod_asset =="I-SPREAD")    
         btp:  CurveStructure(
            fl_input =="I",
            cod_asset =="BTP")      
         cbu:  CurveStructure(
            fl_input =="I",
            cod_asset =="CBU-3mE")    
         output_cbu:  CurveStructure(
            fl_input =="O",
            cod_asset =="CBU-3mE")
		 dyn_soglia:  CurveStructure(
            fl_input =="I",
            cod_asset =="DYN-CBU-3mE")



 
    then
    
      OUT_list list = new OUT_list();
      Double spread = null;
      Data dtRif = output_cbu.getAsOfDate();
 	  Double yearlyDiscountFactor = 0;
      Double quarterlyDiscountFactor = 0;
         
 	  log.debug("Controllo #12")
	  
      ispread.applyNotDecreisingLogic();
      CurveStructure c = CurveStructure.merge(ispread, btp, "C-MERGED");
      int[] tenor = {2,3,4,5,6,7,8,9,10,15,20,25,30};
      int len = tenor.length;
      Double dyn_soglia_value = 0;
     
      double[] rateCurvaFix = new double[len];
      Data[] dtCurvaFix = new Data[len];
      String[] codTenor = {"2Y","3Y","4Y","5Y","6Y","7Y","8Y","9Y","10Y","15Y","20Y","25Y","30Y"};
      int j = 1;
      int k = 1;
      
      log.debug("DT_MATURITY\tRATE_CURVA_FIX\tBASIS\tyearlyDiscountFactor\tquarterlyDiscountFactor\tSPREAD");
      
      for(int i=tenor.length-1; i>=0; i--){
        
         dtCurvaFix[i] = Data.getAnnoTraslato(dtRif,tenor[i]);
         rateCurvaFix[i] = c.getInterpolatedRate( dtCurvaFix[i]);
     
         if( dtCurvaFix[i].compareTo(ispread.getDtMaturity(ispread.getBucketNumber()-1))>0) {
         	rateCurvaFix[i] = rateCurvaFix[i] + (ispread.getBucket(ispread.getBucketNumber()-1)-c.getBucket(ispread.getBucketNumber()));
         }
         
         //codTenor[i]= (String) (tenor+"Y");
         dyn_soglia_value = dyn_soglia.getBucket(codTenor[i]);
         
         yearlyDiscountFactor = 0;
         quarterlyDiscountFactor = 0;
         
     
         for(j=1; j<=30; j++){
         	if(Data.getAnnoTraslato(dtRif,j).compareTo(dtCurvaFix[i])<=0 ){
         		yearlyDiscountFactor =  yearlyDiscountFactor + discount.getInterpolatedRate(Data.getAnnoTraslato(dtRif,j));
         		
         	}
         	
         }
         
         for(k=1; k<=120; k++){
         	if(Data.getMeseTraslato(dtRif,3*k).compareTo(dtCurvaFix[i])<=0 ){
         		 quarterlyDiscountFactor =  quarterlyDiscountFactor + discount.getInterpolatedRate(Data.getMeseTraslato(dtRif,3*k)) * dayCounter.getDifferenzaGiorniCarm(Data.getMeseTraslato(dtRif,3*(k-1)), Data.getMeseTraslato(dtRif,3*k), DayCounter.ACT360 );
         	}
         }
         
         
         	
      	
      	 spread = (rateCurvaFix[i]+basis.getBucket(i))*(yearlyDiscountFactor/quarterlyDiscountFactor);
      	 spread = MathOperator.round(spread,2);
      	 log.debug(dtCurvaFix[i]+"\t"+rateCurvaFix[i]+"\t"+basis.getBucket(i)+"\t"+yearlyDiscountFactor+"\t"+quarterlyDiscountFactor+"\t"+spread);
 
      	 
      	 list.add(new OUT(output_cbu.getCod_asset(), output_cbu.getCod_type(), output_cbu.getCod_ccy(),spread, codTenor[i].toString(), spread-MathOperator.round(output_cbu.getBucket(i),2), output_cbu.getSoglia()+dyn_soglia_value, output_cbu.getDtMaturity(i), output_cbu.getOrderNum(i)));     	    
         
         
         
      }     
   
    //  CurveStructure curvaFix = new CurveStructure(dtCurvaFix, rateCurvaFix, codTenor, "CURVA-FIX", dtRif);
    //  log.debug(curvaFix.toString());
      
    //  log.debug(basis.toString());
      
      
  	  insert(list);
  	  
end  

 


