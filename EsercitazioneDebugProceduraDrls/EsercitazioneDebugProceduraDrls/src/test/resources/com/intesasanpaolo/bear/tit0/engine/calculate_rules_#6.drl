package com.intesasanpaolo.bear.tit0.engine;

import com.intesasanpaolo.bear.tit0.engine.*;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonRowObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonTableObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.ZeroTermStructure;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.CurveStructure;
import com.intesasanpaolo.bear.tit0.engine.model.drools.IN;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT_list;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT;
import com.intesasanpaolo.bear.tit0.engine.utils.MathOperator;
import org.apache.commons.math3.analysis.function.Max;
import org.kie.api.builder.*;
import org.kie.api.runtime.*;
import com.google.gson.*;
import java.util.*

import java.util.ArrayList;
import java.util.HashMap;
import com.intesasanpaolo.bear.tit0.engine.utils.*;
import org.slf4j.Logger;

global java.util.HashMap myMap

 


rule"Controllo #6"
    dialect"mvel"
    when
        
        dayCounter: DayCounter()
        log: Logger()


         ois_ASK:  CurveStructure(
            fl_input =="I",
            cod_asset =="OIS-SOFR-USD",
            cod_type =="ASK")   
         ois_BID:  CurveStructure(
            fl_input =="I",
            cod_asset =="OIS-SOFR-USD",
            cod_type =="BID")       
         spiti3_USD_ASK:  CurveStructure(
            fl_input =="I",
            cod_asset =="SPITI3-USD",
            cod_type =="ASK")    
         sprd_sofr:  CurveStructure(
            fl_input =="I",
            cod_asset =="SPRD-SOFR")
         output_sofr:  CurveStructure(
            fl_input =="O",
            cod_asset =="SPRD-SOFR")
            
                  
    then
    
      OUT_list list = new OUT_list();
      String tenor="";
      Double spread = null;

 	  log.debug("Controllo #6")
	  log.debug("TENOR\tTYPE\tSPITI3 ASK\tOIS ASK\tOIS BID\tSOFR\tSPREAD")
      
    
      
      tenor = "1M"
      spread = spiti3_USD_ASK.getBucket(tenor)-(ois_ASK.getBucket(tenor)+ois_BID.getBucket(tenor))/2
      spread = MathOperator.round(spread,2)
      log.debug(tenor+"\t"+output_sofr.getCod_type()+"\t"+spiti3_USD_ASK.getBucket(tenor)+"\t"+ois_ASK.getBucket(tenor)+"\t"+ois_BID.getBucket(tenor)+"\t"+output_sofr.getBucket(tenor)+"\t"+spread)
      list.add(new OUT(output_sofr.getCod_asset(), output_sofr.getCod_type(), output_sofr.getCod_ccy(),spread, tenor, spread-output_sofr.getBucket(tenor), output_sofr.getSoglia(), output_sofr.getDtMaturity(tenor), output_sofr.getOrderNum(tenor)));     	    
      
      tenor = "2M"
      spread = spiti3_USD_ASK.getBucket(tenor)-(ois_ASK.getBucket(tenor)+ois_BID.getBucket(tenor))/2
      spread = MathOperator.round(spread,2)
      log.debug(tenor+"\t"+output_sofr.getCod_type()+"\t"+spiti3_USD_ASK.getBucket(tenor)+"\t"+ois_ASK.getBucket(tenor)+"\t"+ois_BID.getBucket(tenor)+"\t"+output_sofr.getBucket(tenor)+"\t"+spread)
      list.add(new OUT(output_sofr.getCod_asset(), output_sofr.getCod_type(), output_sofr.getCod_ccy(),spread, tenor, spread-output_sofr.getBucket(tenor), output_sofr.getSoglia(), output_sofr.getDtMaturity(tenor), output_sofr.getOrderNum(tenor)));     	    
      
      tenor = "3M"
      spread = spiti3_USD_ASK.getBucket(tenor)-(ois_ASK.getBucket(tenor)+ois_BID.getBucket(tenor))/2
      spread = MathOperator.round(spread,2)
      log.debug(tenor+"\t"+output_sofr.getCod_type()+"\t"+spiti3_USD_ASK.getBucket(tenor)+"\t"+ois_ASK.getBucket(tenor)+"\t"+ois_BID.getBucket(tenor)+"\t"+output_sofr.getBucket(tenor)+"\t"+spread)
      list.add(new OUT(output_sofr.getCod_asset(), output_sofr.getCod_type(), output_sofr.getCod_ccy(),spread, tenor, spread-output_sofr.getBucket(tenor), output_sofr.getSoglia(), output_sofr.getDtMaturity(tenor), output_sofr.getOrderNum(tenor)));     	    
      
      tenor = "6M"
      spread = spiti3_USD_ASK.getBucket(tenor)-(ois_ASK.getBucket(tenor)+ois_BID.getBucket(tenor))/2
      spread = MathOperator.round(spread,2)
      log.debug(tenor+"\t"+output_sofr.getCod_type()+"\t"+spiti3_USD_ASK.getBucket(tenor)+"\t"+ois_ASK.getBucket(tenor)+"\t"+ois_BID.getBucket(tenor)+"\t"+output_sofr.getBucket(tenor)+"\t"+spread)
      list.add(new OUT(output_sofr.getCod_asset(), output_sofr.getCod_type(), output_sofr.getCod_ccy(),spread, tenor, spread-output_sofr.getBucket(tenor), output_sofr.getSoglia(), output_sofr.getDtMaturity(tenor), output_sofr.getOrderNum(tenor)));     	    
      
      tenor = "9M"
      spread = spiti3_USD_ASK.getBucket(tenor)-(ois_ASK.getBucket(tenor)+ois_BID.getBucket(tenor))/2
      spread = MathOperator.round(spread,2)
      log.debug(tenor+"\t"+output_sofr.getCod_type()+"\t"+spiti3_USD_ASK.getBucket(tenor)+"\t"+ois_ASK.getBucket(tenor)+"\t"+ois_BID.getBucket(tenor)+"\t"+output_sofr.getBucket(tenor)+"\t"+spread)
      list.add(new OUT(output_sofr.getCod_asset(), output_sofr.getCod_type(), output_sofr.getCod_ccy(),spread, tenor, spread-output_sofr.getBucket(tenor), output_sofr.getSoglia(), output_sofr.getDtMaturity(tenor), output_sofr.getOrderNum(tenor)));     	    
      
      tenor = "1Y"
      spread = spiti3_USD_ASK.getBucket(tenor)-(ois_ASK.getBucket(tenor)+ois_BID.getBucket(tenor))/2
      spread = MathOperator.round(spread,2)
      log.debug(tenor+"\t"+output_sofr.getCod_type()+"\t"+spiti3_USD_ASK.getBucket(tenor)+"\t"+ois_ASK.getBucket(tenor)+"\t"+ois_BID.getBucket(tenor)+"\t"+output_sofr.getBucket(tenor)+"\t"+spread)
      list.add(new OUT(output_sofr.getCod_asset(), output_sofr.getCod_type(), output_sofr.getCod_ccy(),spread, tenor, spread-output_sofr.getBucket(tenor), output_sofr.getSoglia(), output_sofr.getDtMaturity(tenor), output_sofr.getOrderNum(tenor)));     	    
      
      tenor = "18M"
      spread = spiti3_USD_ASK.getBucket(tenor)-(ois_ASK.getBucket(tenor)+ois_BID.getBucket(tenor))/2
      spread = MathOperator.round(spread,2)
      log.debug(tenor+"\t"+output_sofr.getCod_type()+"\t"+spiti3_USD_ASK.getBucket(tenor)+"\t"+ois_ASK.getBucket(tenor)+"\t"+ois_BID.getBucket(tenor)+"\t"+output_sofr.getBucket(tenor)+"\t"+spread)
      list.add(new OUT(output_sofr.getCod_asset(), output_sofr.getCod_type(), output_sofr.getCod_ccy(),spread, tenor, spread-output_sofr.getBucket(tenor), output_sofr.getSoglia(), output_sofr.getDtMaturity(tenor), output_sofr.getOrderNum(tenor)));     	    
      
      
            
  	  insert(list)
  	  
end  

 


