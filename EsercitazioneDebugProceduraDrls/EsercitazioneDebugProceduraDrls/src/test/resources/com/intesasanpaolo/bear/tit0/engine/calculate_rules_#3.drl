package com.intesasanpaolo.bear.tit0.engine;

import com.intesasanpaolo.bear.tit0.engine.*;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonRowObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonTableObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.ZeroTermStructure;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.CurveStructure;
import com.intesasanpaolo.bear.tit0.engine.model.drools.IN;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT_list;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT;
import com.intesasanpaolo.bear.tit0.engine.utils.MathOperator;
import org.apache.commons.math3.analysis.function.Max;
import org.kie.api.builder.*;
import org.kie.api.runtime.*;
import com.google.gson.*;
import java.util.*

import java.util.ArrayList;
import java.util.HashMap;
import com.intesasanpaolo.bear.tit0.engine.utils.*;
import org.slf4j.Logger;

global java.util.HashMap myMap

 
rule"Controllo #3"
    dialect"mvel"
    when
        
        dayCounter: DayCounter()
        log: Logger()
        spiti3:  CurveStructure(
            fl_input =="I",
            cod_asset =="SPITI3-EUR",
            cod_type =="ASK")    
        irs1mAsk:  CurveStructure(
            fl_input =="I",
            cod_asset =="IRS-1M",
            cod_type =="ASK")        
        irs1mBid:  CurveStructure(
            fl_input =="I",
            cod_asset =="IRS-1M",
            cod_type =="BID")        
        irs3mAsk:  CurveStructure(
            fl_input =="I",
            cod_asset =="IRS-3M",
            cod_type =="ASK")        
        irs3mBid:  CurveStructure(
            fl_input =="I",
            cod_asset =="IRS-3M",
            cod_type =="BID")        
        irs6mAsk:  CurveStructure(
            fl_input =="I",
            cod_asset =="IRS-6M",
            cod_type =="ASK")        
        irs6mBid:  CurveStructure(
            fl_input =="I",
            cod_asset =="IRS-6M",
            cod_type =="BID")       
        sprd3m:  CurveStructure(
            fl_input =="I",
            cod_asset =="SPRD-EURIBOR-3M")       
        sprd6m:  CurveStructure(
            fl_input =="I",
            cod_asset =="SPRD-EURIBOR-6M")       
        sprd1m:  CurveStructure(
            fl_input =="I",
            cod_asset =="SPRD-EURIBOR-1M")               
        outputSprd3m:  CurveStructure(
            fl_input =="O",
            cod_asset =="SPRD-EURIBOR-3M")       
        outputSprd6m:  CurveStructure(
            fl_input =="O",
            cod_asset =="SPRD-EURIBOR-6M")       
        outputSprd1m:  CurveStructure(
            fl_input =="O",
            cod_asset =="SPRD-EURIBOR-1M")             
         titMlt: CurveStructure(
            fl_input =="I",
            cod_asset =="TIT-MLT")  
         
	            
	                  
    then
    
      OUT_list list = new OUT_list();
      String tenor=""
      Double irsMid = 0
      Double spread = null;
      Double irs1Ymid = (irs3mAsk.getBucket("1Y")+ irs3mBid.getBucket("1Y"))/2d
      Double sl18m = ((spiti3.getBucket("1Y")-irs1Ymid+titMlt.getBucket("2Y"))/2d)
      
      log.debug("Controllo #3")
	  log.debug("TENOR\tSPITI\tIRS\tSL18M\tSPREAD")
    	    
      tenor="3M"
      irsmid = (irs1mAsk.getBucket(tenor)+ irs1mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd1m.getCod_asset(), outputSprd1m.getCod_type(), outputSprd1m.getCod_ccy(),spread, tenor, spread-outputSprd1m.getBucket(tenor), outputSprd1m.getSoglia(), outputSprd1m.getDtMaturity(tenor), outputSprd1m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
       
      tenor="6M"
      irsmid = (irs1mAsk.getBucket(tenor)+ irs1mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd1m.getCod_asset(), outputSprd1m.getCod_type(), outputSprd1m.getCod_ccy(),spread, tenor, spread-outputSprd1m.getBucket(tenor), outputSprd1m.getSoglia(), outputSprd1m.getDtMaturity(tenor), outputSprd1m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      irsmid = (irs3mAsk.getBucket(tenor)+ irs3mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd3m.getCod_asset(), outputSprd3m.getCod_type(), outputSprd3m.getCod_ccy(),spread, tenor, spread-outputSprd3m.getBucket(tenor), outputSprd3m.getSoglia(), outputSprd3m.getDtMaturity(tenor), outputSprd3m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      tenor="9M"
      irsmid = (irs1mAsk.getBucket(tenor)+ irs1mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd1m.getCod_asset(), outputSprd1m.getCod_type(), outputSprd1m.getCod_ccy(),spread, tenor, spread-outputSprd1m.getBucket(tenor), outputSprd1m.getSoglia(), outputSprd1m.getDtMaturity(tenor), outputSprd1m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      irsmid = (irs3mAsk.getBucket(tenor)+ irs3mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd3m.getCod_asset(), outputSprd3m.getCod_type(), outputSprd3m.getCod_ccy(),spread, tenor, spread-outputSprd3m.getBucket(tenor), outputSprd3m.getSoglia(), outputSprd3m.getDtMaturity(tenor), outputSprd3m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      tenor="1Y"
      irsmid = (irs1mAsk.getBucket(tenor)+ irs1mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd1m.getCod_asset(), outputSprd1m.getCod_type(), outputSprd1m.getCod_ccy(),spread, tenor, spread-outputSprd1m.getBucket(tenor), outputSprd1m.getSoglia(), outputSprd1m.getDtMaturity(tenor), outputSprd1m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      irsmid = (irs3mAsk.getBucket(tenor)+ irs3mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd3m.getCod_asset(), outputSprd3m.getCod_type(), outputSprd3m.getCod_ccy(),spread, tenor, spread-outputSprd3m.getBucket(tenor), outputSprd3m.getSoglia(), outputSprd3m.getDtMaturity(tenor), outputSprd3m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      irsmid = (irs6mAsk.getBucket(tenor)+ irs6mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd6m.getCod_asset(), outputSprd6m.getCod_type(), outputSprd6m.getCod_ccy(),spread, tenor, spread-outputSprd6m.getBucket(tenor), outputSprd6m.getSoglia(), outputSprd6m.getDtMaturity(tenor), outputSprd6m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      tenor="18M"
      irsmid = (irs1mAsk.getBucket(tenor)+ irs1mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd1m.getCod_asset(), outputSprd1m.getCod_type(), outputSprd1m.getCod_ccy(),spread, tenor, spread-outputSprd1m.getBucket(tenor), outputSprd1m.getSoglia(), outputSprd1m.getDtMaturity(tenor), outputSprd1m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      irsmid = (irs3mAsk.getBucket(tenor)+ irs3mBid.getBucket(tenor))/2d
      spread = MathOperator.round(sl18m,2)
      list.add(new OUT(outputSprd3m.getCod_asset(), outputSprd3m.getCod_type(), outputSprd3m.getCod_ccy(),spread, tenor, spread-outputSprd3m.getBucket(tenor), outputSprd3m.getSoglia(), outputSprd3m.getDtMaturity(tenor), outputSprd3m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
     
      irsmid = (irs6mAsk.getBucket(tenor)+ irs6mBid.getBucket(tenor))/2d
      spread = MathOperator.round(spiti3.getBucket(tenor)-irsmid,2)
      list.add(new OUT(outputSprd6m.getCod_asset(), outputSprd6m.getCod_type(), outputSprd6m.getCod_ccy(),spread, tenor, spread-outputSprd6m.getBucket(tenor), outputSprd6m.getSoglia(), outputSprd6m.getDtMaturity(tenor), outputSprd6m.getOrderNum(tenor)));
      log.debug(tenor+"\t"+spiti3.getBucket(tenor)+"\t"+irsmid+"\t"+sl18m+"\t"+spread)
      
  
            
  	  insert(list)
  	  
end  
