package com.intesasanpaolo.bear.tit0.engine;

import com.intesasanpaolo.bear.tit0.engine.*;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonRowObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.JsonTableObject;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.ZeroTermStructure;
import com.intesasanpaolo.bear.tit0.engine.model.json.structure.CurveStructure;
import com.intesasanpaolo.bear.tit0.engine.model.drools.IN;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT_list;
import com.intesasanpaolo.bear.tit0.engine.model.drools.OUT;
import com.intesasanpaolo.bear.tit0.engine.utils.MathOperator;
import org.apache.commons.math3.analysis.function.Max;
import org.kie.api.builder.*;
import org.kie.api.runtime.*;
import com.google.gson.*;
import java.util.*

import java.util.ArrayList;
import java.util.HashMap;
import com.intesasanpaolo.bear.tit0.engine.utils.*;
import org.slf4j.Logger;

global java.util.HashMap myMap

 


rule"Controllo #13"
    dialect"mvel"
    when
        
        dayCounter: DayCounter()
        log: Logger()


         output_tit_tit:  JsonRowObject(
            getString("FLAG_INPUT") =="O",
            getString("COD_ASSET")  =="TIT-MLT")   
      		
		 avg_cbu: Number( )
            from accumulate ( JsonTenorObject(
             					COD_TENOR == output_tit_tit.getString("COD_TENOR"),
                                cbu: getRowElement("CBU-3mE", "Spread").getDouble("SPREAD_RATE"),
                                ), 
                                average(cbu))
                                
       
    then
        
	  insert(new OUT(output_tit_tit.getString("COD_ASSET"), output_tit.getString("COD_TYPE"),  output_tit.getString("COD_CCY"),avg_cbu, output_tit.getString("COD_TENOR"), avg_cbu-MathOperator.round(output_tit.getDouble("SPREAD_RATE"),2), output_tit.getDouble("SOGLIA"), output_tit.getTruncDateTimeAsString("DT_MATURITY"), output_tit.getString("ORDER_NUM")));	         
      
end  

 


